package br.com.danilocerne.springboot.example.math;

import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;

import br.com.danilocerne.springboot.example.converters.NumberConverter;
import br.com.danilocerne.springboot.example.exceptions.UnsupportedMathOperationException;

public class SimpleMath {
	
	public Double sum(Double numberOne, Double numberTwo) {
		
		return numberOne + numberTwo;
	}
	
	public Double subtraction(Double numberOne, Double numberTwo) {
		
		return numberOne - numberTwo;
	}
	
	@RequestMapping(value = "/multiplication/{numberOne}/{numberTwo}", method = RequestMethod.GET)
	public Double multiplication(
			@PathVariable(value = "numberOne") String numberOne,
			@PathVariable(value = "numberTwo") String numberTwo) throws Exception {
		
		if (!NumberConverter.isNumeric(numberOne) || (!NumberConverter.isNumeric(numberTwo))) { 
			throw new UnsupportedMathOperationException("Please set a numeric value!");
		}
		
		return NumberConverter.convertToDouble(numberOne) * NumberConverter.convertToDouble(numberTwo);
	}
	
	@RequestMapping(value = "/division/{numberOne}/{numberTwo}", method = RequestMethod.GET)
	public Double division(
			@PathVariable(value = "numberOne") String numberOne,
			@PathVariable(value = "numberTwo") String numberTwo) throws Exception {
		
		if (!NumberConverter.isNumeric(numberOne) || (!NumberConverter.isNumeric(numberTwo))) { 
			throw new UnsupportedMathOperationException("Please set a numeric value!");
		}
		
		return NumberConverter.convertToDouble(numberOne) / NumberConverter.convertToDouble(numberTwo);
	}
	
	@RequestMapping(value = "/mean/{numberOne}/{numberTwo}", method = RequestMethod.GET)
	public Double mean(
			@PathVariable(value = "numberOne") String numberOne,
			@PathVariable(value = "numberTwo") String numberTwo) throws Exception {
		
		if (!NumberConverter.isNumeric(numberOne) || (!NumberConverter.isNumeric(numberTwo))) { 
			throw new UnsupportedMathOperationException("Please set a numeric value!");
		}
		
		return (NumberConverter.convertToDouble(numberOne) + NumberConverter.convertToDouble(numberTwo)) / 2;
	}
	
	@RequestMapping(value = "/squareRoot/{number}", method = RequestMethod.GET)
	public Double squareRoot(
			@PathVariable(value = "number") String number) throws Exception {
		
		if (!NumberConverter.isNumeric(number)) { 
			throw new UnsupportedMathOperationException("Please set a numeric value!");
		}
		
		return Math.sqrt(NumberConverter.convertToDouble(number));
	}
}
